using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using CCDPlanetHelper.Database;
using CCDPlanetHelper.Models;
using Fooxboy.NucleusBot;
using Fooxboy.NucleusBot.Interfaces;
using Fooxboy.NucleusBot.Models;
using Newtonsoft.Json;

namespace CCDPlanetHelper.Commands
{
    public class CarInfoCommand:INucleusCommand
    {
        public string Command => "carinfo";
        public string[] Aliases => new string[0];
        public void Execute(Message msg, IMessageSenderService sender, IBot bot)
        {
            //–ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ—Ç–æ–º –ø–µ—Ä–≤—ã–π —Ä–∞–∑.
            var usrs1 = JsonConvert.DeserializeObject<MailingModel>(File.ReadAllText("MailingUsers.json"));
            if (usrs1.Users.All(u => u.UserId != msg.MessageVK.FromId.Value))
            {
                usrs1.Users.Add(new ValuesMail()
                {
                    IsActive = true,
                    UserId = msg.MessageVK.FromId.Value
                });
                
                File.WriteAllText("MailingUsers.json", JsonConvert.SerializeObject(usrs1));
            }
            
            var carid = long.Parse(msg.Payload.Arguments[0]);
            
            var file = File.ReadAllText("AdminsConfig.json");
            var admins = JsonConvert.DeserializeObject<Models.AdminsModels>(file);

            bool isAdmin = admins.Users.Any(u => u == msg.MessageVK.FromId);

            using (var db = new BotData())
            {
                var car = db.Cars.SingleOrDefault(c => c.CarId == carid);

                


                var adminText = string.Empty;

                if (isAdmin) adminText = $"\n ‚öô ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {carid}";


                var tuningText = string.Empty;

                var tunings = car.TuningPacks.Split(",");
                var ids = new List<long>();
                foreach (var tuning in tunings)
                {
                    if (tuning != "")
                    {
                        ids.Add(long.Parse(tuning));
                    }
                }

                var tuningsT = new List<TuningPack>();

                foreach (var id in ids)
                {
                    var t = db.TuningPacks.SingleOrDefault(t => t.PackId == id);
                    tuningsT.Add(t);
                }


                foreach (var pack in tuningsT)
                {
                    tuningText += $"üî∂ {pack.Name} - {pack.Price.ToString("N1")} ‚ÇΩ \n";
                }

                long priceRub = 0;
                long priceDoll = 0;
                long priceEuro = 0;

                string priceStr = "";
                
                var courseText = File.ReadAllText("CourseConfig.json");
                var course = JsonConvert.DeserializeObject<CourseModel>(courseText);

                if (car.Currency == 1) //—Ä—É–±
                {
                    priceRub = car.Price;
                    priceDoll = Convert.ToInt64(Convert.ToSingle(car.Price) / course.Dollar);
                    priceEuro = Convert.ToInt64(Convert.ToSingle(car.Price) / course.Euro);
                    priceStr = $"{priceRub.ToString("N1").Split(",")[0]}‚ÇΩ";
                }else if (car.Currency == 2) //–¥–æ–ª–ª
                {
                    priceRub = Convert.ToInt64(course.Dollar * Convert.ToSingle(car.Price));
                    priceDoll = car.Price;
                    priceEuro = Convert.ToInt64(Convert.ToSingle(priceRub) / course.Euro);
                    priceStr = $"{priceRub.ToString("N1").Split(",")[0]}‚ÇΩ (${priceDoll.ToString("N1").Split(",")[0]})";
                }else if (car.Currency == 3) //–µ–≤—Ä–æ
                {
                    priceRub = Convert.ToInt64(course.Euro * Convert.ToSingle(car.Price));
                    priceEuro = car.Price;
                    priceDoll = Convert.ToInt64(Convert.ToSingle(priceRub) / course.Dollar);
                    priceStr = $"{priceRub.ToString("N1").Split(",")[0]}‚ÇΩ ({priceEuro.ToString("N1").Split(",")[0]}‚Ç¨)";
                }

                var price1 = Convert.ToDecimal(priceRub);

                var price2 = Convert.ToInt64(Decimal.Multiply(price1, decimal.Parse("0,84")));
                var price3 = Convert.ToInt64(Decimal.Multiply(price1, decimal.Parse("0,7")));


                var showroomStr = "";

                if (car.Showroom == 1)
                {
                    showroomStr = "–ï–≤—Ä–æ–ø–∞";
                }else if (car.Showroom == 2)
                {
                    showroomStr = "–Ø–ø–æ–Ω–∏—è";
                }else if (car.Showroom == 3)
                {
                    showroomStr = "Toyota";
                }else if (car.Showroom == 4)
                {
                    showroomStr = "Mercedes-Benz";
                }else if (car.Showroom == 5)
                {
                    showroomStr = "BMW";
                }else if (car.Showroom == 6)
                {
                    showroomStr = "–õ–∞–¥–∞";
                }else if (car.Showroom == 7)
                {
                    showroomStr = "–Ø—Ö—Ç—ã";
                }else if (car.Showroom == 8)
                {
                    showroomStr = "–í–µ—Ä—Ç–æ–ª–µ—Ç—ã";
                }else if (car.Showroom == 9)
                {
                    showroomStr = "–ê–º–µ—Ä–∏–∫–∞";
                }else if (car.Showroom == 10)
                {
                    showroomStr = "–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π";
                }

                var text = $"üöò –ú–æ–¥–µ–ª—å: {car.Model}" +
                           $"\n üíµ –¶–µ–Ω–∞ —Å —Å–∞–ª–æ–Ω–∞: {priceStr}" +
                           $"\n üí∞ –¶–µ–Ω–∞ —Å –±/—É: {price2.ToString("N1").Split(",")[0]}‚ÇΩ" +
                           $"\n üí≥ –°–ª–∏–≤ —Å –±/—É: {price3.ToString("N1").Split(",")[0]}‚ÇΩ" +
                           $"\n üíé –¶–µ–Ω–∞ –∑–∞ –¥–æ–Ω–∞—Ç-–≤–∞–ª—é—Ç—É: {car.PriceDonate.ToString("N1").Split(",")[0]}" +
                           $"\n üöó –ê–≤—Ç–æ—Å–∞–ª–æ–Ω: {showroomStr}" +
                           $"\n ‚öô –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {car.MaxSpeed}" +
                           $"{adminText}" +
                           $"\n " +
                           $"\n üîß –ö–æ–º–ø–ª–µ–∫—Ç—ã —Ç—é–Ω–∏–Ω–≥–∞:" +
                           $"\n {tuningText}";

                var kb = new KeyboardBuilder(bot);
                kb.AddButton("‚úî –î–æ–±–∞–≤–∏—Ç—å –≤ —Ü–µ–ª—å", "addtarget", new List<string>() {car.CarId.ToString()});
                kb.AddLine();
                kb.AddButton("üîô –í –º–µ–Ω—é", "menu");
                kb.SetOneTime();
                sender.TextImage(text, msg.ChatId, car.Image, kb.Build());
            }
            
            
        }
        

        public void Init(IBot bot, ILoggerService logger)
        {
        }
    }
}